<properties>
	<!-- 令牌服务配置
	(long sessionTimeout, Object sessionStore,
			String cookiename, boolean httponly,
			long cookieLiveTime,String[] listeners)
	-->
	<property name="sessionManager" class="org.frameworkset.security.session.impl.SessionManager"
		init-method="init" destroy-method="destroy">		
			<property name="sessionTimeout" value="3600000"/>
			<property name="sessionstore" refid="attr:sessionstore"/> 
			<!-- <property name="sessionstore" value="session"/>-->
			<property name="cookiename" value="b_sessionid"/>			
			<property name="httpOnly" value="true"/>
			<property name="secure" value="false"/>
	<!--
	  应用编码，如果没有指定appcode值默认为应用上下文
	  appcode的作用：当所有的应用上下文为“/”时，用来区分后台统计的会话信息
	  如果应用上下文为“/”时,appcode为ROOT
	 
	 当启用跨域会话共享时，就必须指定appcode
	 -->
		
 	<property name="appcode" value="pdp"/> 
			<!-- 
			rootDomain：指定跨域共享的根域，基于该域名的子域名都可以共享session
			domain：指定当前应用的域名，主要是有些代理软件，可能无法将客户端的域名传递到服务端,主要是用来唯一区分应用
			currentApp：用来标识对应的应用作为为当前系统应用配置，true 是，false 不是
			shareSessionAttrs:配置需要在应用间共享的会话数据属性名称，以逗号分隔；如果没有配置shareSessionAttrs属性，则所有的属性都是共享数据 
			domainApps：指定需要session共享的应用列表，每个应用必须指定path属性（对应应用上下文路径），如果应用指定了attributeNamespace属性，则用attributeNamespace对应的值来限定应用私有的会话数据名称
						每个app的attributeNamespace属性只有在CrossDomain上指定了shareSessionAttrs属性才有意义
			path:共享session的应用上下文名称
			attributeNamespace:共享session应用私有session属性名称命名空间，用来限定应用私有session数据的存储空间  ，如果指定了shareSessionAttrs则必须指定每个应用的attributeNamespace			
			-->
			<property name="crossDomain" class="org.frameworkset.security.session.domain.CrossDomain" 
			    f:rootDomain="s.com.cn"
			    f:shareSessionAttrs="CREDENTIAL_INDEXS,PRINCIPAL_INDEXS" 
			    init-method="init">
			    <property name="domainApps">
				    <list componentType="bean">
				        <property class="org.frameworkset.security.session.domain.App"
				            	f:path="/SPDP"
				            	f:domain="pdp.s.com.cn"
				            	f:attributeNamespace="pdp_s_com_cn"
				            	f:currentApp="true"
				            	init-method="init"
				            />				        
				        <property class="org.frameworkset.security.session.domain.App"				            	
				            	f:path="/g4studio"	
				            	f:attributeNamespace="g4_s_com_cn"
				            	f:domain="g4.s.com.cn"
				            	f:currentApp="false"
				            	init-method="init"
				            />
				        
				        <property class="org.frameworkset.security.session.domain.App"				            	
				            	f:path="/"	
				            	f:attributeNamespace="test_s_com_cn"
				            	f:domain="test.s.com.cn"
				            	f:currentApp="false"
				            	init-method="init"
				            />
				        <property class="org.frameworkset.security.session.domain.App"				            	
				            	f:path="/WebRoot"	
				            	f:attributeNamespace="testpdp_s_com_cn"
				            	f:domain="testpdp.s.com.cn"
				            	f:currentApp="false"
				            	init-method="init"
				            />
				    </list>
			    </property>
			</property>
<!--             <property name="sessionlisteners" value="org.frameworkset.security.session.impl.NullSessionListener"/> -->
			<property name="startLifeScan" value="false"/>
	</property>
	
	<property name="sessionStaticManager" class="org.frameworkset.security.session.statics.MongoSessionStaticManagerImpl"/>	
	
	<property name="sessionstore" class="org.frameworkset.security.session.impl.MongDBSessionStore"/>
</properties>

	
