<properties>
	<!-- 
	会话共享配置:跨越配置实例
	-->
	<property name="sessionManager" class="org.frameworkset.security.session.impl.SessionManager"
		init-method="init" destroy-method="destroy">					
			<!-- <property name="sessionIDGenerator" class="org.frameworkset.security.session.impl.UUIDSessionIDGenerator"/> -->
			<!-- <property name="serialType" value="bboss|json|jvm"/> -->
			
			<property name="sessionTimeout" value="3600000"/>
			<property name="sessionstore" refid="attr:sessionstore"/> 
			<!-- <property name="sessionstore" value="session"/>-->
			<property name="cookiename" value="b_sessionid"/>
			<!-- 
			enableSessionIDFromParameter:支持以参数方式 传递sessionid控制开关
			true 启用,使用cookiename属性对应的值作为传递sessionid的参数名称
			false 关闭 默认值
			优先从cookie中获取sessionid，如果从cookie中没有获取sessionid到才需要从参数中获取sessionid	
			从参数传递的sessionid，必须采用以下方式对sessionid进行加密，才能传递：
			String sid = SessionUtil.getSessionManager().getSignSessionIDGenerator().sign("d4d6d67bb1e64bb39ee81434add36b59", true);
			-->	
			<property name="enableSessionIDFromParameter" value="false"/>
			<!-- 
				将从请求参数中获取sessionid写回cookie控制开关，当enableSessionIDFromParameter为true时起作用<br>
					true 启用,使用cookiename属性将对应的值作为sessionid写回cookie<br>
					false 关闭 默认值<br>
				bboss采用增强的sessionid签名校验机制，避免客户端篡改sessionid，为了避免bboss内置的sessionid的签名算法被暴露，请修改默认的signKey
			 -->
			<property name="rewriteSessionCookie" value="false"/>
			<!-- 
			是否对sessionid进行加密存入cookie
			 true 加密
			 false 不加密，默认值
			 -->
			<property name="signSessionID" value="false"/>	
			
			<!-- 
				sessionid 签名key，signSessionID为true时起作用
			 -->
			<property name="signKey" value="bboss_session"/>		
			<property name="httpOnly" value="true"/>
			<property name="secure" value="false"/>
			<property name="lazystore" value="true"/>
			<property name="storeReadAttributes" value="false"/>			
			<property name="monitorAttributes" ><![CDATA[
			[
				{"name":"userAccount","cname":"账号","type":"String","like":true,"enableEmptyValue":false},				
				{"name":"worknumber","cname":"工号","type":"String","like":false,"enableEmptyValue":true}
			]			
			]]></property>
	<!--
	  应用编码，如果没有指定appcode值默认为应用上下文
	  appcode的作用：当所有的应用上下文为“/”时，用来区分后台统计的会话信息
	  如果应用上下文为“/”时,appcode为ROOT
	 
	 当启用跨域会话共享时，就必须指定appcode
	 -->
		
<!-- 			<property name="appcode" value="pdp"/> -->
			<!-- 
			domain：指定跨域共享的根域，基于该域名的子域名都可以共享session
			shareSessionAttrs:配置需要在应用间共享的会话数据属性名称，以逗号分隔；如果没有配置shareSessionAttrs属性，则所有的属性都是共享数据 
			domainApps：指定需要session共享的应用列表，每个应用必须指定path属性（对应应用上下文路径），如果应用指定了attributeNamespace属性，则用attributeNamespace对应的值来限定应用私有的会话数据名称
						每个app的attributeNamespace属性只有在CrossDomain上指定了shareSessionAttrs属性才有意义
			path:共享session的应用上下文名称
			attributeNamespace:共享session应用私有session属性名称命名空间，用来限定应用私有session数据的存储空间  ，如果指定了shareSessionAttrs则必须指定每个应用的attributeNamespace			
			-->
			<!-- <property name="crossDomain" class="org.frameworkset.security.session.domain.CrossDomain" 
			    f:domain="s.com.cn"
			    f:shareSessionAttrs="CREDENTIAL_INDEXS,PRINCIPAL_INDEXS" 
			    init-method="init">
			    <property name="domainApps">
				    <list componentType="bean">
				        <property class="org.frameworkset.security.session.domain.App"
				            	f:path="/sPDP"
				            	f:attributeNamespace="pdp_s_com_cn"
				            	init-method="init"
				            />				        
				        <property class="org.frameworkset.security.session.domain.App"				            	
				            	f:path="/g4studio"	
				            	f:attributeNamespace="g4_s_com_cn"
				            	init-method="init"
				            />
				        
				        <property class="org.frameworkset.security.session.domain.App"				            	
				            	f:path="/WebRoot"	
				            	f:attributeNamespace="testpdp_s_com_cn"
				            	init-method="init"
				            />
				    </list>
			    </property>
			</property>  -->  
			
<!--             <property name="sessionlisteners" value="org.frameworkset.security.session.impl.NullSessionListener"/> -->
	</property>
	<!-- 
	monitorScope="self|all" 指定监控管理的session数据的应用系统范围:
	self:表示只能监控管理本应用的会话数据
	all:表示监控管理所有应用的会话数据
	f:monitorAttributes 指定监控模块可以额外查询的属性字段 userAccount,userWorknumber
	 -->
	<property name="sessionStaticManager"
	    f:monitorScope="all" class="org.frameworkset.security.session.statics.MongoSessionStaticManagerImpl"
	    
	    />	
	
	<property name="sessionstore" class="org.frameworkset.security.session.impl.MongDBSessionStore"/>
</properties>

	
